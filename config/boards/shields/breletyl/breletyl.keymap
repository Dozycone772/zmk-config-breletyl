/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/*
 Need to pull sweep code changes across
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define RAISE 1
#define LOWER 2
#define ADJUST 3
#define MOUSE 4
#define SLIP 5

&mt {
    tapping-term-ms = <200>;
};

/ {
    behaviors {
        td_mtls: tap_dance_triple_brackets_left {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_triple_brackets_left";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp LPAR>, <&kp LBKT>, <&kp LBRC>;
        };
        
        td_mtrs: tap_dance_triple_brackets_right {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_triple_brackets_right";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp RPAR>, <&kp RBKT>, <&kp RBRC>;
        };
        
        td_minund: tap_dance_minus_underscore {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_minus_underscore";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };

        pht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        lh_hrms: left_positional_hold_tap_strong {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        lh_hrmm: left_positional_hold_tap_middle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        lh_hrmr: left_positional_hold_tap_ring {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 34 35>;
            hold-trigger-on-release;
        };

        lh_hrmp: left_positional_hold_tap_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <500>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rh_hrms: right_positional_hold_tap_strong {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        rh_hrmm: right_positional_hold_tap_middle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        thb_lr: thumb_layer_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
            bindings = <&mo>, <&kp>;
        };
    };

    macros {
        slippw: slippw {
            label = "SLIPPW";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp D &kp Y &kp W &kp LS(T) &kp M &kp L &kp M &kp LS(F)>
                ; 
        };

        pwcunm: pwcu {
            label = "PWCUSERNAME";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp R &kp Y &kp A &kp N &kp DOT &kp S &kp DOT &kp B &kp R &kp O &kp W &kp N &kp AT &kp P &kp W &kp C &kp DOT &kp C &kp O &kp M &kp TAB>
                ; 
        };
    };

    combos {            
        compatible = "zmk,combos";
            combo_sliplayer {
            timeout-ms = <20>;
            key-positions = <16 18>;
            layers = <0 1 2 3 4 5>;
            bindings = <&mo SLIP>;
        };  

            combo_BSPC {
            timeout-ms = <200>;
            key-positions = <12 31>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp BSPC>;
        };  

            combo_excl {
            timeout-ms = <200>;
            key-positions = <0 10>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp EXCL>;
        };  

            combo_atsym {
            timeout-ms = <200>;
            key-positions = <1 11>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp AT>;
        };  

            combo_hash {
            timeout-ms = <200>;
            key-positions = <2 12>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp HASH>;
        };  

            combo_dollar {
            timeout-ms = <200>;
            key-positions = <3 13>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp DLLR>;
        };  

            combo_prcnt {
            timeout-ms = <200>;
            key-positions = <4 14>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp PRCNT>;
        };  

            combo_raise {
            timeout-ms = <200>;
            key-positions = <5 15>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp CARET>;
        };  

            combo_ampsd {
            timeout-ms = <200>;
            key-positions = <6 16>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp AMPS>;
        };  

            combo_astx {
            timeout-ms = <200>;
            key-positions = <7 17>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp ASTRK>;
        };  

            combo_lbrc {
            timeout-ms = <200>;
            key-positions = <8 18>;
            layers = <0 1 2 3 4 5>;
            bindings = <&td_mtls>;
        };  

            combo_rbrc {
            timeout-ms = <200>;
            key-positions = <9 19>;
            layers = <0 1 2 3 4 5>;
            bindings = <&td_mtrs>;
        };  

            combo_esc {
            timeout-ms = <200>;
            key-positions = <8 9>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp ESC>;
        };  

            combo_capsword {
            timeout-ms = <200>;
            key-positions = <31 34>;
            layers = <0 1 2 3 4 5>;
            bindings = <&caps_word>;
        };

            combo_lockcad {
            timeout-ms = <200>;
            key-positions = <0 1>;
            layers = <0>;
            bindings = <&pht LC(LA(DEL)) LG(L)>;
        };

            combo_btclear {
            timeout-ms = <200>;
            key-positions = <0 1 2 3>;
            layers = <1>;
            bindings = <&bt BT_CLR>;
        };
          
            combo_outputtoggle {
            timeout-ms = <200>;
            key-positions = <0 1>;
            layers = <1>;
            bindings = <&out OUT_TOG>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q               &pht LC(W) W        &pht LC(F) F        &pht LC(P) P        &pht LC(B) B                                               &pht LC(J) J        &pht LC(L) L     &pht LC(U) U           &pht LC(Y) Y        &pht LS(SQT) SQT
                &lh_hrmp LGUI A     &lh_hrmr LALT R     &lh_hrmm LCTRL S    &lh_hrms LSHFT T    &pht LC(G) G                                               &kp M               &rh_hrms RSHFT N &rh_hrmm RCTRL E       &pht LC(I) I        &pht LC(O) O
                &pht LC(Z) Z        &pht LC(X) X        &pht LC(C) C        &pht LC(D) D        &pht LC(V) V                                               &pht LC(K) K        &kp H            &pht LS(COMMA) COMMA   &pht LS(DOT) DOT    &pht LS(FSLH) FSLH
                                                                            &none               &thb_lr MOUSE LC(BSPC)    &thb_lr LOWER TAB                &thb_lr RAISE ENTER &kp SPACE        &none
            >;
        };
        
        RAISE_layer {
            bindings = <
                &bt BT_SEL 0    &bt BT_SEL 1       &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                                 &out OUT_TOG    &trans          &trans                  &trans              &trans
                &kp DEL         &kp LALT           &kp LCTRL       &kp LSHFT       &trans                                       &td_minund      &kp LEFT        &kp DOWN                &kp UP              &kp RIGHT
                &kp LC(Z)       &kp LC(X)          &kp LC(C)       &kp LC(D)       &kp LC(V)                                    &trans          &kp HOME        &kp LC(PG_DN)           &kp LC(PG_UP)       &kp END
                                                                   &none           &trans       &mo ADJUST          &trans      &trans          &none
            >;
        };

        LOWER_layer {
            bindings = <
                &kp EXCL        &kp AT          &kp HASH        &kp DLLR        &kp PRCNT                                       &kp PLUS        &kp N7          &kp N8                  &kp N9              &pht LS(SEMI) SEMI
                &kp F2          &kp F4          &mkp MB2        &mkp MB1        &kp F5                                          &kp EQUAL       &kp N4          &kp N5                  &kp N6              &kp DOT
                &out OUT_TOG    &bt BT_NXT      &kp PG_DN       &kp PG_UP       &kp F12                                         &kp MINUS       &kp N1          &kp N2                  &kp N3              &kp FSLH
                                                                &none           &trans          &trans              &trans      &kp N0          &trans
            >;
        };

        ADJUST_layer {
            bindings = <
                &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_NXT      &bt BT_CLR                                      &kp PLUS        &kp N7          &kp N8                  &kp N9              &trans
                &kp N1          &kp N2          &kp N3          &kp N4          &kp Q                                           &kp EQUAL       &kp N4          &kp N5                  &kp N6              &kp DOT
                &kp N6          &kp N7          &kp N8          &kp N9          &kp N0                                          &kp MINUS       &kp N1          &kp N2                  &kp N3              &kp FSLH
                                                                &none           &trans          &kp LGUI            &trans      &kp N0          &none
            >;
        };

        MOUSE_layer {
            bindings = <
                &kp LC(Z)       &kp LC(X)       &kp LC(C)       &kp LC(Y)       &kp LC(V)                                           &kp LC(Y)   &kp LC(V)       &kp LC(C)               &kp LC(X)           &kp LC(Z)
                &mkp MB1        &mkp MB2        &kp LCTRL       &kp LSHFT       &trans                                              &trans      &mmv MOVE_LEFT  &mmv MOVE_DOWN          &mmv MOVE_UP        &mmv MOVE_RIGHT
                &kp LC(Z)       &kp LC(X)       &kp LC(C)       &kp LC(Y)       &kp LC(V)                                           &trans      &msc SCRL_LEFT  &msc SCRL_DOWN          &msc SCRL_UP        &msc SCRL_RIGHT
                                                                &none           &trans          &trans              &kp SPACE       &kp N0      &none
            >;
        };

        SLIP_layer {
            bindings = <
                &bootloader     &trans          &trans          &trans          &trans                                          &trans          &trans          &trans                  &trans              &bootloader
                &trans          &trans          &trans          &trans          &trans                                          &trans          &trans          &trans                  &trans              &trans
                &trans          &trans          &trans          &trans          &trans                                          &trans          &trans          &trans                  &trans              &trans
                                                                &none           &trans          &trans              &none       &slippw         &pwcunm
            >;
        };
    };
};